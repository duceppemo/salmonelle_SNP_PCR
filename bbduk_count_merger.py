#!/bin/python

__author__ = 'duceppemo'


class BBdukCountMerger(object):

    def __init__(self, args):
        import os
        import sys

        # Define variables based on supplied arguments
        self.args = args
        self.input = args.input
        self.output = args.output

        # Checks
        if not os.path.isfile(self.input):
            sys.exit('Supplied input file does not exists.')

        # create dictionaries to hold data
        self.primer_dict = dict()

        # run the script
        self.run()

    def run(self):
        # Parse count file into dictionary
        with open(self.input, 'r') as f:
            for line in f:
                line = line.rstrip()  # chomp -> remove trailing whitespace characters
                if line:  # skip blank lines or lines with only whitespaces
                    [primer, count] = line.split("\t")
                    [position, allele, number] = primer.split('_')
                    self.primer_dict.setdefault(position, {}).setdefault(allele, []).append(count)

        # Merge count by primer/allele and write to file
        # Remove the lowest abundant allele if more than one is found
        fh = open(self.output, 'w')
        for position, alleles in sorted(iter(self.primer_dict.items())):  # for key, value in d.iteritems():
            ref_count = 0
            alt_count = 0
            for al, counts in sorted(iter(alleles.items())):
                counter = 0
                for c in counts:
                    counter += int(c)
                if al == 'REF':
                    ref_count = counter
                else:  # if allele == 'ALT':
                    alt_count = counter
            if ref_count > 0 and alt_count > 0:
                if ref_count > alt_count:
                    del self.primer_dict[position]['ALT']
                else:
                    del self.primer_dict[position]['REF']
            fh.write(position + '_' + al + "\t" + str(counter) + "\n")

if __name__ == '__main__':

    from argparse import ArgumentParser

    parser = ArgumentParser(description='Merge bbduk counts from primers generated by mismatch_creator.py')
    parser.add_argument('-i', '--input', metavar='bbduk.counts',
                        required=True,
                        help='BBduk count file')

    parser.add_argument('-o', '--output', metavar='bbduk_merged.counts',
                        required=True,
                        help='Output merged count file')

    # Get the arguments into an object
    arguments = parser.parse_args()

    BBdukCountMerger(arguments)
